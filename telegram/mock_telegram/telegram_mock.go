// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/igvaquero18/hermezon/telegram (interfaces: Notifier)

// Package mock_telegram is a generated GoMock package.
package mock_telegram

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNotifier is a mock of Notifier interface
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// SendNotification mocks base method
func (m *MockNotifier) SendNotification(arg0, arg1 string, arg2 []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNotification", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendNotification indicates an expected call of SendNotification
func (mr *MockNotifierMockRecorder) SendNotification(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockNotifier)(nil).SendNotification), arg0, arg1, arg2)
}
