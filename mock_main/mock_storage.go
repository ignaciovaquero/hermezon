// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock_main is a generated GoMock package.
package mock_main

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockKeyValueStorage is a mock of KeyValueStorage interface
type MockKeyValueStorage struct {
	ctrl     *gomock.Controller
	recorder *MockKeyValueStorageMockRecorder
}

// MockKeyValueStorageMockRecorder is the mock recorder for MockKeyValueStorage
type MockKeyValueStorageMockRecorder struct {
	mock *MockKeyValueStorage
}

// NewMockKeyValueStorage creates a new mock instance
func NewMockKeyValueStorage(ctrl *gomock.Controller) *MockKeyValueStorage {
	mock := &MockKeyValueStorage{ctrl: ctrl}
	mock.recorder = &MockKeyValueStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeyValueStorage) EXPECT() *MockKeyValueStorageMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockKeyValueStorage) Save(key, value, bucket string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", key, value, bucket)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockKeyValueStorageMockRecorder) Save(key, value, bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockKeyValueStorage)(nil).Save), key, value, bucket)
}

// Delete mocks base method
func (m *MockKeyValueStorage) Delete(key, bucket string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key, bucket)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockKeyValueStorageMockRecorder) Delete(key, bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKeyValueStorage)(nil).Delete), key, bucket)
}

// Get mocks base method
func (m *MockKeyValueStorage) Get(key, bucket string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key, bucket)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockKeyValueStorageMockRecorder) Get(key, bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeyValueStorage)(nil).Get), key, bucket)
}

// GetAll mocks base method
func (m *MockKeyValueStorage) GetAll(bucket string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", bucket)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockKeyValueStorageMockRecorder) GetAll(bucket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockKeyValueStorage)(nil).GetAll), bucket)
}

// Close mocks base method
func (m *MockKeyValueStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockKeyValueStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKeyValueStorage)(nil).Close))
}
