// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/igvaquero18/hermezon/twilio (interfaces: Notifier)

// Package mock_twilio is a generated GoMock package.
package mock_twilio

import (
	gomock "github.com/golang/mock/gomock"
	gotwilio "github.com/sfreiberg/gotwilio"
	reflect "reflect"
)

// MockNotifier is a mock of Notifier interface
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// SendSMS mocks base method
func (m *MockNotifier) SendSMS(arg0, arg1, arg2, arg3, arg4 string, arg5 ...*gotwilio.Option) (*gotwilio.SmsResponse, *gotwilio.Exception, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendSMS", varargs...)
	ret0, _ := ret[0].(*gotwilio.SmsResponse)
	ret1, _ := ret[1].(*gotwilio.Exception)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SendSMS indicates an expected call of SendSMS
func (mr *MockNotifierMockRecorder) SendSMS(arg0, arg1, arg2, arg3, arg4 interface{}, arg5 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendSMS", reflect.TypeOf((*MockNotifier)(nil).SendSMS), varargs...)
}
